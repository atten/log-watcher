// Generated by CoffeeScript 1.10.0
(function() {
  var TIMERS,
    slice = [].slice,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  TIMERS = {
    one_shot: {},
    periodic: {}
  };

  this.csrfSafeMethod = function(method) {
    return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);
  };

  this.uniqueId = function(length) {
    var id;
    if (length == null) {
      length = 8;
    }
    id = "";
    while (id.length < length) {
      id += Math.random().toString(36).substr(2);
    }
    return id.substr(0, length);
  };

  this.make_timer = function(options) {
    var o, timer_id;
    o = {
      callback: function() {},
      timeout: 1000,
      name: '000',
      one_shot: false
    };
    o = _extend(o, options);
    if (options.one_shot) {
      clear_timer(o.name, true);
      timer_id = window.setTimeout(o.callback, o.timeout);
      TIMERS.one_shot[o.name] = timer_id;
    } else {
      clear_timer(o.name, false);
      timer_id = window.setInterval(o.callback, o.timeout);
      TIMERS.periodic[o.name] = timer_id;
    }
    return timer_id;
  };

  this.clear_timer = function(name, one_shot) {
    var timer_id;
    if (one_shot && name in TIMERS.one_shot) {
      timer_id = TIMERS.one_shot[name];
      window.clearTimeout(timer_id);
      return delete TIMERS.one_shot[name];
    } else if (!one_shot && name in TIMERS.periodic) {
      timer_id = TIMERS.periodic[name];
      window.clearInterval(timer_id);
      return delete TIMERS.periodic[name];
    }
  };

  this.clear_timers = function() {
    var ref, ref1, results1, t, val;
    ref = TIMERS.one_shot;
    for (t in ref) {
      val = ref[t];
      clear_timer(t, true);
    }
    ref1 = TIMERS.periodic;
    results1 = [];
    for (t in ref1) {
      val = ref1[t];
      results1.push(clear_timer(t));
    }
    return results1;
  };

  this._debounce = function(key, timeout, callback) {
    clear_timer(key, true);
    return make_timer({
      name: key,
      timeout: timeout,
      one_shot: true,
      callback: callback
    });
  };

  this._obj2hash = function(obj) {
    return encodeURIComponent(JSON.stringify(obj));
  };

  this._hash2obj = function(str) {
    return JSON.parse(decodeURIComponent(str));
  };

  this._extend = function() {
    var dst, exclude, j, k, key, len, src, src_list, value;
    dst = arguments[0], src_list = 3 <= arguments.length ? slice.call(arguments, 1, j = arguments.length - 1) : (j = 1, []), exclude = arguments[j++];
    if (exclude == null) {
      exclude = [];
    }
    if (!(exclude instanceof Array)) {
      src_list.push(exclude);
      exclude = [];
    }
    for (k = 0, len = src_list.length; k < len; k++) {
      src = src_list[k];
      for (key in src) {
        if (!hasProp.call(src, key)) continue;
        value = src[key];
        if (indexOf.call(exclude, key) < 0) {
          dst[key] = value;
        }
      }
    }
    return dst;
  };

  this._int = function(value, min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = void 0;
    }
    value = +value;
    if (!value || typeof value !== 'number' || value < min) {
      return min;
    }
    if (value > max) {
      return max;
    }
    return Math.floor(value);
  };

  this._getQueryValue = function(param, u) {
    var i, j, len, pair, part, query, vars;
    if (u == null) {
      u = document.location.href;
    }
    i = u.indexOf('?');
    if (i < 0) {
      return;
    }
    query = u.substr(i + 1);
    vars = query.split('&');
    for (j = 0, len = vars.length; j < len; j++) {
      part = vars[j];
      pair = part.split('=');
      if (decodeURIComponent(pair[0]) === param) {
        return decodeURIComponent(pair[1]);
      }
    }
  };

  this.gettext_gender = function(male_text, fem_text, neuter_text, detection_text) {
    var detection_char;
    detection_char = _.last(_.words(detection_text)[0]);
    if (indexOf.call('ая', detection_char) >= 0) {
      return fem_text;
    }
    if (detection_char === 'о') {
      return neuter_text;
    }
    return male_text;
  };

  this._error = function(message, display_length) {
    if (display_length == null) {
      display_length = 4000;
    }
    return UIkit.notify({
      message: message,
      status: 'danger',
      timeout: display_length
    });
  };

  this._success = function(message, display_length) {
    if (display_length == null) {
      display_length = 4000;
    }
    return UIkit.notify({
      message: message,
      status: 'success',
      timeout: display_length
    });
  };

  this._warning = function(message, display_length) {
    if (display_length == null) {
      display_length = 4000;
    }
    return UIkit.notify({
      message: message,
      status: 'warning',
      timeout: display_length
    });
  };

  this._info = function(message, display_length) {
    if (display_length == null) {
      display_length = 4000;
    }
    return UIkit.notify(message, {
      timeout: display_length
    });
  };

  this._ajaxError = function(jqXHR, display_length) {
    var data, ref;
    if (display_length == null) {
      display_length = 4000;
    }
    data = ((ref = jqXHR.responseJSON) != null ? ref.detail : void 0) || jqXHR.responseJSON || (jqXHR.status + ": " + jqXHR.statusText);
    return _error(data, display_length);
  };

  this._confirm_dialog = function(options) {
    var content, modal_options, request;
    content = options.content || '';
    modal_options = {
      bgclose: true,
      keyboard: true,
      labels: {
        'Cancel': gettext('Cancel')
      }
    };
    request = (function(_this) {
      return function() {
        return $.ajax({
          url: options.url,
          method: options.method || 'GET',
          success: function() {
            if (options.message) {
              _success(options.message);
            }
            return options.success();
          },
          error: function(res) {
            return _ajaxError(res);
          }
        });
      };
    })(this);
    if (options.skip_dialog) {
      return request();
    } else {
      return UIkit.modal.confirm(content, request, null, modal_options);
    }
  };

  this._input_dialog = function(options) {
    var modal_options;
    modal_options = {
      bgclose: true,
      keyboard: true,
      labels: {
        'Ok': 'Ok',
        'Cancel': gettext('Cancel')
      }
    };
    return UIkit.modal.prompt(options.message, '', function(val) {
      return options.success(val);
    }, modal_options);
  };

  this._load_templates = function(urls_dict, namespace, version, cache) {
    var alias, cached_template, def_list, main_def, template_defer, url, url_alias_list, w;
    if (cache == null) {
      cache = true;
    }
    lscache.setBucket("templates:" + namespace + ":" + version);
    def_list = [];
    url_alias_list = [];
    for (alias in urls_dict) {
      url = urls_dict[alias];
      url_alias_list.push(alias);
      cached_template = lscache.get(alias);
      template_defer = cached_template && cache ? [cached_template] : $.get(url);
      def_list.push(template_defer);
    }
    main_def = $.Deferred();
    w = $.when.apply($, def_list);
    w.then(function() {
      var arg, i, j, len, results, template;
      lscache.setBucket("templates:" + namespace + ":" + version);
      results = {};
      if (def_list.length === 1) {
        template = arguments[0];
        if (typeof template === 'object') {
          template = template[0];
        }
        results[url_alias_list[0]] = template;
        lscache.set(url_alias_list[0], template);
      } else {
        for (i = j = 0, len = arguments.length; j < len; i = ++j) {
          arg = arguments[i];
          if (i > url_alias_list.length) {
            break;
          }
          results[url_alias_list[i]] = arg[0];
          lscache.set(url_alias_list[i], arg[0]);
        }
      }
      return main_def.resolve(results);
    });
    w.fail(function() {
      return main_def.reject("Failed to load some of " + urls_dict);
    });
    return main_def.promise();
  };

  this._register_module = function(name, module_data) {
    if (!window.__MODULES__) {
      window.__MODULES__ = {};
    }
    return window.__MODULES__[name] = module_data;
  };

  this._get_module = function(name) {
    return window.__MODULES__[name];
  };

  this.strip_tags = function(html) {
    return html.replace(/(<[^>]+>)/ig, "");
  };

  this._get_scrollbar_width = function() {
    var $outer, widthWithScroll;
    $outer = $('<div>').css({
      width: 100,
      height: 100,
      overflow: 'auto',
      position: 'absolute',
      top: -1000,
      left: -1000
    }).appendTo('body');
    widthWithScroll = $('<div>').css({
      width: '100%',
      height: 200
    }).appendTo($outer).outerWidth();
    $outer.remove();
    return 100 - widthWithScroll;
  };

  this._align_to_scrollbar = function(elem) {
    return elem.css('margin-right', (_get_scrollbar_width()) + "px");
  };

  String.prototype.capFirst = function() {
    return this[0].toUpperCase() + this.slice(1);
  };

  String.prototype.capitalize = function() {
    return _.capitalize(this);
  };

  if (typeof String.prototype.startsWith !== 'function') {
    String.prototype.startsWith = function(str) {
      return this.substring(0, str.length) === str;
    };
  }

  if (typeof String.prototype.endsWith !== 'function') {
    String.prototype.endsWith = function(str) {
      return this.substring(this.length - str.length, this.length) === str;
    };
  }

  this.from_iso_date = function(d) {
    if (d == null) {
      return d;
    } else {
      return new Date(d).toLocaleString();
    }
  };

}).call(this);

//# sourceMappingURL=utils.js.map
