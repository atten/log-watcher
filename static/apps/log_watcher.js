// Generated by CoffeeScript 1.10.0
(function() {
  var base_url, log_watcher;

  log_watcher = {
    version: '0.1',
    lscache_templates: env.is_minified
  };

  _register_module('log_watcher', log_watcher);

  base_url = "/static/apps/ractive_templates/";

  log_watcher.templates = _load_templates({
    log_watcher: base_url + "log_watcher.html",
    chain_view: base_url + "chain_view.html",
    log_table: base_url + "log_table.html",
    all_entries_view: base_url + "all_entries_view.html"
  }, 'log_watcher', log_watcher.version, log_watcher.lscache_templates);

  log_watcher.ready = [log_watcher.templates];

  $.when.apply($, log_watcher.ready).then(function(templates) {
    var AllEntriesView, ChainView, LogTable, LogWatcher;
    LogTable = Ractive.extend({
      template: templates.log_table,
      isolated: true,
      data: {
        entries: null,
        milliseconds: function(s) {
          return (s * 1000).toFixed(2);
        },
        color_for_code: function(code) {
          if ((100 <= code && code < 400)) {
            return 'green';
          }
          if ((400 <= code && code < 500)) {
            return 'pink';
          }
          if ((500 <= code && code < 600)) {
            return 'red';
          }
        },
        bytes_to_str: function(b) {
          if (b < 1024) {
            return b + " B";
          }
          if (b < Math.pow(1024, 2)) {
            return ((b / 1024).toFixed(1)) + " KB";
          }
          if (b < Math.pow(1024, 3)) {
            return ((b / Math.pow(1024, 2)).toFixed(3)) + " ÐœB";
          }
        },
        entry_to_str: function(entry) {
          return JSON.stringify(entry, null, '  ');
        },
        uuid_short: function(uuid) {
          return uuid.substr(0, 5);
        },
        uuid_link: function(uuid) {
          return "#?uuid=" + uuid + "&tab=chain";
        }
      },
      oninit: function() {
        this.on('expand-entry-click', function(e) {
          return e.toggle('expanded');
        });
        this.on('entry-click', function(e) {
          return this.fire('uuid-selected', e.get('data.log_uuid'));
        });
        this.on('entry-user-click', function(e) {
          return this.fire('user-selected', e.get('data.request.user.id'));
        });
        this.on('request-path-click', function(e) {
          return this.fire('request-path-selected', e.get('data.request.path'), e.get('data.request.method'));
        });
        this.on('response-code-click', function(e) {
          return this.fire('resp-code-selected', e.get('data.response.code'));
        });
        return this.on('response-code-hover', function(e) {
          if (!e.node.title) {
            return e.node.title = JSON.stringify(e.get('data.response.json'));
          }
        });
      }
    });
    AllEntriesView = Ractive.extend({
      template: templates.all_entries_view,
      isolated: true,
      data: {
        entries: null,
        loaded: false,
        loading: false,
        collections: null,
        filters: null
      },
      load_table: function(continuous) {
        var args, c, filters;
        if (continuous == null) {
          continuous = false;
        }
        if (this.get('loading')) {
          return;
        }
        this.set('loading', true);
        if (!this.get('loaded')) {
          continuous = false;
        }
        args = {
          collection: this.get('collections'),
          limit: this.get_pages_size()
        };
        if (filters = this.get('filters')) {
          args.filters_str = JSON.stringify(filters);
        }
        if (continuous) {
          args.skip = (function() {
            var j, len, ref, results;
            ref = this.get('collections');
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              c = ref[j];
              results.push(this.count_per_collection[c]);
            }
            return results;
          }).call(this);
        }
        return $.getJSON(url("logs_list") + '?' + $.param(args, true), (function(_this) {
          return function(result) {
            var entry, j, k, len, len1, ref;
            if (!continuous) {
              _this.set('entries', []);
              _this.scroll_container.scrollTop = 0;
              _this.count_per_collection = {};
              ref = _this.get('collections');
              for (j = 0, len = ref.length; j < len; j++) {
                c = ref[j];
                _this.count_per_collection[c] = 0;
              }
            }
            for (k = 0, len1 = result.length; k < len1; k++) {
              entry = result[k];
              entry.expanded = false;
              _this.push('entries', entry);
              _this.count_per_collection[entry.collection] += 1;
            }
            _this.set({
              loading: false,
              loaded: true
            });
            return _this.last_result_count = result.length;
          };
        })(this));
      },
      get_pages_size: function() {
        return Math.max(Math.ceil(this.scroll_container.clientHeight / 30), 10);
      },
      container_scroll: function() {
        var el;
        el = this.scroll_container;
        if (!this.get('loading') && this.last_result_count && el.scrollHeight - el.clientHeight - el.scrollTop < 20) {
          return this.load_table(true);
        }
      },
      oncomplete: function() {
        return this.observe('collections filters', function() {
          return this.load_table();
        });
      },
      onrender: function() {
        this.scroll_container = document.body;
        return window.onscroll = (function(_this) {
          return function(e) {
            return _this.container_scroll();
          };
        })(this);
      }
    });
    ChainView = Ractive.extend({
      template: templates.chain_view,
      isolated: true,
      data: {
        uuid: null,
        collections: null,
        entries: null,
        loading: false
      },
      load_chain: function() {
        var args, uuid;
        uuid = this.get('uuid');
        if (!uuid || this.get('loading')) {
          return;
        }
        this.set('loading', true);
        args = {
          collection: this.get('collections')
        };
        return $.getJSON(url("logs_by_uuid", uuid) + '?' + $.param(args, true), (function(_this) {
          return function(result) {
            var entry, j, len;
            for (j = 0, len = result.length; j < len; j++) {
              entry = result[j];
              entry.expanded = false;
            }
            return _this.set({
              entries: result,
              loading: false
            });
          };
        })(this));
      },
      onrender: function() {
        return this.observe('uuid collections', function() {
          return this.load_chain();
        });
      }
    });
    LogWatcher = Ractive.extend({
      template: templates.log_watcher,
      isolated: true,
      data: {
        collections: null,
        opened_tabs: null,
        active_tab: null,
        selected_uuid: null,
        sidebar_visible: true,
        filters: null,
        filters_str: null,
        filters_str_valid: true
      },
      computed: {
        active_collections: function() {
          var c, j, len, ref, results;
          ref = this.get('collections');
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            c = ref[j];
            if (c.is_active) {
              results.push(c.name);
            }
          }
          return results;
        }
      },
      reset_collections: function() {
        var collections, i, j, len, ref;
        collections = [];
        ref = env.collections;
        for (j = 0, len = ref.length; j < len; j++) {
          i = ref[j];
          collections.push({
            name: i,
            is_active: true
          });
        }
        return this.set('collections', collections);
      },
      set_collections_from_hash: function() {
        var c, changed, j, len, new_val, ref, values;
        values = _getQueryValue('collections', window.location.hash);
        if (values === void 0) {
          return;
        }
        values = values.split(',');
        changed = false;
        ref = this.get('collections');
        for (j = 0, len = ref.length; j < len; j++) {
          c = ref[j];
          new_val = values.indexOf(c.name) !== -1;
          if (c.is_active !== new_val) {
            changed = true;
          }
          c.is_active = new_val;
        }
        if (changed) {
          return this.update('collections');
        }
      },
      set_active_tab_from_hash: function() {
        var tab;
        tab = _getQueryValue('tab', window.location.hash);
        if (!(tab != null ? tab.length : void 0)) {
          tab = $('#log-tabs .item')[0].dataset.tab;
        }
        return this.set_active_tab(tab);
      },
      set_uuid_from_hash: function() {
        var uuid;
        uuid = _getQueryValue('uuid', window.location.hash) || null;
        return this.set('selected_uuid', uuid);
      },
      set_filters_from_hash: function() {
        var filters;
        filters = _getQueryValue('filters', window.location.hash) || '';
        return this.set('filters_str', filters);
      },
      set_active_tab: function(tab) {
        if (this.get('active_tab') === tab) {
          return;
        }
        $("#log-tabs .item[data-tab=" + tab + "]").click();
        return this.set('active_tab', tab);
      },
      update_url_hash: function() {
        var d, filters, uuid;
        d = {};
        d.collections = this.get('active_collections').join(',');
        d.tab = this.get('active_tab');
        if (uuid = this.get('selected_uuid')) {
          d.uuid = uuid;
        }
        if (filters = this.get('filters_str')) {
          d.filters = filters;
        }
        return window.location.hash = '?' + $.param(d);
      },
      read_url_hash_params: function() {
        this.set_collections_from_hash();
        this.set_active_tab_from_hash();
        this.set_uuid_from_hash();
        return this.set_filters_from_hash();
      },
      show_chain: function(uuid) {
        if (!uuid || uuid === this.get('selected_uuid')) {
          return;
        }
        this.set('selected_uuid', uuid);
        this.set_active_tab('chain');
        return this.update_url_hash();
      },
      set_filter: function(obj) {
        var filters;
        filters = this.get('filters');
        _extend(filters, obj);
        this.set('filters_str', JSON.stringify(filters));
        return this.update_url_hash();
      },
      oncomplete: function() {
        $('.menu .item').tab();
        this.read_url_hash_params();
        return this.update_url_hash();
      },
      oninit: function() {
        this.reset_collections();
        this.set('opened_tabs', {});
        this.set('filters', {});
        document.title = 'Log watcher';
        window.onhashchange = (function(_this) {
          return function(e) {
            return _this.read_url_hash_params();
          };
        })(this);
        this.observe('active_tab', function(val) {
          if (!val) {
            return;
          }
          return this.set("opened_tabs." + val, true);
        });
        this.observe('filters_str', function(str) {
          var SyntaxError, error, val;
          if (!(str != null ? str.length : void 0)) {
            this.set({
              filters: {},
              filters_str_valid: true
            });
            return;
          }
          try {
            val = JSON.parse(str);
            this.set({
              filters: val,
              filters_str_valid: true
            });
            return this.update_url_hash();
          } catch (error) {
            SyntaxError = error;
            return this.set('filters_str_valid', false);
          }
        });
        this.on('*.uuid-selected', function(uuid) {
          return this.show_chain(uuid);
        });
        this.on('*.user-selected', function(user_id) {
          return this.set_filter({
            'data.request.user.id': user_id
          });
        });
        this.on('*.resp-code-selected', function(resp_code) {
          return this.set_filter({
            'data.response.code': resp_code
          });
        });
        this.on('*.request-path-selected', function(path, method) {
          return this.set_filter({
            'data.request.path': path,
            'data.request.method': method
          });
        });
        this.on('sidebar-toggle-click', function() {
          return this.toggle('sidebar_visible');
        });
        this.on('collection-click', function(e) {
          e.toggle('is_active');
          return this.update_url_hash();
        });
        return this.on('tab-click', function(e) {
          var tab;
          tab = e.node.dataset.tab;
          this.set('active_tab', tab);
          return this.update_url_hash();
        });
      }
    });
    Ractive.components.LogTable = LogTable;
    Ractive.components.AllEntriesView = AllEntriesView;
    Ractive.components.ChainView = ChainView;
    return Ractive.components.LogWatcher = LogWatcher;
  });

}).call(this);

//# sourceMappingURL=log_watcher.js.map
